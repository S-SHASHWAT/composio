{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNwvu8xHfNJ/GDlOgjrtNXE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/S-SHASHWAT/composio/blob/master/Banking%20Case%20Data%20Analytics\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "YDBOhm9PNzAt",
        "outputId": "43caa3c4-b327-4731-ca0f-1a6da3ef55b0"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/Banking.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-b4c503d5d92a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/Banking.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/Banking.csv'"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "df = pd.read_csv('/content/Banking.csv')\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "ONnQ02WGbD-x",
        "outputId": "e16b2386-f4fa-4f74-ee71-4aaeff62246c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Client ID             Name  Age  Location ID Joined Bank   Banking Contact  \\\n",
              "0  IND81288    Raymond Mills   24        34324  06-05-2019    Anthony Torres   \n",
              "1  IND65833    Julia Spencer   23        42205  10-12-2001  Jonathan Hawkins   \n",
              "2  IND47499   Stephen Murray   27         7314  25-01-2010     Anthony Berry   \n",
              "3  IND72498   Virginia Garza   40        34594  28-03-2019        Steve Diaz   \n",
              "4  IND60181  Melissa Sanders   46        41269  20-07-2012        Shawn Long   \n",
              "\n",
              "  Nationality            Occupation Fee Structure Loyalty Classification  ...  \\\n",
              "0    American  Safety Technician IV          High                   Jade  ...   \n",
              "1     African   Software Consultant          High                   Jade  ...   \n",
              "2    European    Help Desk Operator          High                   Gold  ...   \n",
              "3    American          Geologist II           Mid                 Silver  ...   \n",
              "4    American   Assistant Professor           Mid               Platinum  ...   \n",
              "\n",
              "   Bank Deposits  Checking Accounts  Saving Accounts  \\\n",
              "0     1485828.64          603617.88        607332.46   \n",
              "1      641482.79          229521.37        344635.16   \n",
              "2     1033401.59          652674.69        203054.35   \n",
              "3     1048157.49         1048157.49        234685.02   \n",
              "4      487782.53          446644.25        128351.45   \n",
              "\n",
              "   Foreign Currency Account  Business Lending  Properties Owned  \\\n",
              "0                  12249.96        1134475.30                 1   \n",
              "1                  61162.31        2000526.10                 1   \n",
              "2                  79071.78         548137.58                 1   \n",
              "3                  57513.65        1148402.29                 0   \n",
              "4                  30012.14        1674412.12                 0   \n",
              "\n",
              "   Risk Weighting  BRId  GenderId  IAId  \n",
              "0               2     1         1     1  \n",
              "1               3     2         1     2  \n",
              "2               3     3         2     3  \n",
              "3               4     4         1     4  \n",
              "4               3     1         2     5  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a926a6ba-be4e-4108-97ab-8d7910b1da42\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Client ID</th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>Location ID</th>\n",
              "      <th>Joined Bank</th>\n",
              "      <th>Banking Contact</th>\n",
              "      <th>Nationality</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Fee Structure</th>\n",
              "      <th>Loyalty Classification</th>\n",
              "      <th>...</th>\n",
              "      <th>Bank Deposits</th>\n",
              "      <th>Checking Accounts</th>\n",
              "      <th>Saving Accounts</th>\n",
              "      <th>Foreign Currency Account</th>\n",
              "      <th>Business Lending</th>\n",
              "      <th>Properties Owned</th>\n",
              "      <th>Risk Weighting</th>\n",
              "      <th>BRId</th>\n",
              "      <th>GenderId</th>\n",
              "      <th>IAId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>IND81288</td>\n",
              "      <td>Raymond Mills</td>\n",
              "      <td>24</td>\n",
              "      <td>34324</td>\n",
              "      <td>06-05-2019</td>\n",
              "      <td>Anthony Torres</td>\n",
              "      <td>American</td>\n",
              "      <td>Safety Technician IV</td>\n",
              "      <td>High</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>1485828.64</td>\n",
              "      <td>603617.88</td>\n",
              "      <td>607332.46</td>\n",
              "      <td>12249.96</td>\n",
              "      <td>1134475.30</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>IND65833</td>\n",
              "      <td>Julia Spencer</td>\n",
              "      <td>23</td>\n",
              "      <td>42205</td>\n",
              "      <td>10-12-2001</td>\n",
              "      <td>Jonathan Hawkins</td>\n",
              "      <td>African</td>\n",
              "      <td>Software Consultant</td>\n",
              "      <td>High</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>641482.79</td>\n",
              "      <td>229521.37</td>\n",
              "      <td>344635.16</td>\n",
              "      <td>61162.31</td>\n",
              "      <td>2000526.10</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>IND47499</td>\n",
              "      <td>Stephen Murray</td>\n",
              "      <td>27</td>\n",
              "      <td>7314</td>\n",
              "      <td>25-01-2010</td>\n",
              "      <td>Anthony Berry</td>\n",
              "      <td>European</td>\n",
              "      <td>Help Desk Operator</td>\n",
              "      <td>High</td>\n",
              "      <td>Gold</td>\n",
              "      <td>...</td>\n",
              "      <td>1033401.59</td>\n",
              "      <td>652674.69</td>\n",
              "      <td>203054.35</td>\n",
              "      <td>79071.78</td>\n",
              "      <td>548137.58</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IND72498</td>\n",
              "      <td>Virginia Garza</td>\n",
              "      <td>40</td>\n",
              "      <td>34594</td>\n",
              "      <td>28-03-2019</td>\n",
              "      <td>Steve Diaz</td>\n",
              "      <td>American</td>\n",
              "      <td>Geologist II</td>\n",
              "      <td>Mid</td>\n",
              "      <td>Silver</td>\n",
              "      <td>...</td>\n",
              "      <td>1048157.49</td>\n",
              "      <td>1048157.49</td>\n",
              "      <td>234685.02</td>\n",
              "      <td>57513.65</td>\n",
              "      <td>1148402.29</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>IND60181</td>\n",
              "      <td>Melissa Sanders</td>\n",
              "      <td>46</td>\n",
              "      <td>41269</td>\n",
              "      <td>20-07-2012</td>\n",
              "      <td>Shawn Long</td>\n",
              "      <td>American</td>\n",
              "      <td>Assistant Professor</td>\n",
              "      <td>Mid</td>\n",
              "      <td>Platinum</td>\n",
              "      <td>...</td>\n",
              "      <td>487782.53</td>\n",
              "      <td>446644.25</td>\n",
              "      <td>128351.45</td>\n",
              "      <td>30012.14</td>\n",
              "      <td>1674412.12</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a926a6ba-be4e-4108-97ab-8d7910b1da42')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a926a6ba-be4e-4108-97ab-8d7910b1da42 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a926a6ba-be4e-4108-97ab-8d7910b1da42');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-55e4fbd5-9c1d-432e-88fe-283f228a7528\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55e4fbd5-9c1d-432e-88fe-283f228a7528')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-55e4fbd5-9c1d-432e-88fe-283f228a7528 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i89J-mldbKlk",
        "outputId": "f1dd04da-73a6-4b0f-92a2-852aa1b053af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Client ID              Name  Age  Location ID Joined Bank  \\\n",
            "0     IND81288     Raymond Mills   24        34324  06-05-2019   \n",
            "1     IND65833     Julia Spencer   23        42205  10-12-2001   \n",
            "2     IND47499    Stephen Murray   27         7314  25-01-2010   \n",
            "3     IND72498    Virginia Garza   40        34594  28-03-2019   \n",
            "4     IND60181   Melissa Sanders   46        41269  20-07-2012   \n",
            "...        ...               ...  ...          ...         ...   \n",
            "2995  IND66827         Earl Hall   82         8760  09-10-2014   \n",
            "2996  IND40556  Billy Williamson   44        32837  05-02-2009   \n",
            "2997  IND72414      Victor Black   70        36088  29-12-2009   \n",
            "2998  IND46652       Andrew Ford   56        24871  13-02-2006   \n",
            "2999  IND40216        Amy Nguyen   79        38518  08-12-2005   \n",
            "\n",
            "          Banking Contact Nationality                     Occupation  \\\n",
            "0          Anthony Torres    American           Safety Technician IV   \n",
            "1        Jonathan Hawkins     African            Software Consultant   \n",
            "2           Anthony Berry    European             Help Desk Operator   \n",
            "3              Steve Diaz    American                   Geologist II   \n",
            "4              Shawn Long    American            Assistant Professor   \n",
            "...                   ...         ...                            ...   \n",
            "2995       Joshua Bennett    American       Accounting Assistant III   \n",
            "2996          Dennis Ruiz    European                      Paralegal   \n",
            "2997          Joshua Ryan    American                Statistician IV   \n",
            "2998  Nicholas Cunningham    European  Human Resources Assistant III   \n",
            "2999           Joe Hanson    American            Biostatistician III   \n",
            "\n",
            "     Fee Structure Loyalty Classification  ...  Bank Deposits  \\\n",
            "0             High                   Jade  ...     1485828.64   \n",
            "1             High                   Jade  ...      641482.79   \n",
            "2             High                   Gold  ...     1033401.59   \n",
            "3              Mid                 Silver  ...     1048157.49   \n",
            "4              Mid               Platinum  ...      487782.53   \n",
            "...            ...                    ...  ...            ...   \n",
            "2995          High                   Gold  ...     1089957.03   \n",
            "2996           Mid                   Gold  ...      136891.32   \n",
            "2997           Low                   Jade  ...      214860.89   \n",
            "2998           Mid                   Jade  ...      742630.22   \n",
            "2999          High                   Jade  ...       65617.66   \n",
            "\n",
            "      Checking Accounts  Saving Accounts  Foreign Currency Account  \\\n",
            "0             603617.88        607332.46                  12249.96   \n",
            "1             229521.37        344635.16                  61162.31   \n",
            "2             652674.69        203054.35                  79071.78   \n",
            "3            1048157.49        234685.02                  57513.65   \n",
            "4             446644.25        128351.45                  30012.14   \n",
            "...                 ...              ...                       ...   \n",
            "2995          532867.88        657849.62                  12947.31   \n",
            "2996           56581.74         93195.61                  23205.69   \n",
            "2997          158726.06         35539.15                  30291.81   \n",
            "2998          404638.26         56411.33                   6413.14   \n",
            "2999           77769.08         32371.38                   8992.36   \n",
            "\n",
            "      Business Lending  Properties Owned  Risk Weighting  BRId  GenderId  IAId  \n",
            "0           1134475.30                 1               2     1         1     1  \n",
            "1           2000526.10                 1               3     2         1     2  \n",
            "2            548137.58                 1               3     3         2     3  \n",
            "3           1148402.29                 0               4     4         1     4  \n",
            "4           1674412.12                 0               3     1         2     5  \n",
            "...                ...               ...             ...   ...       ...   ...  \n",
            "2995        1238859.91                 1               3     3         2     4  \n",
            "2996         277171.07                 1               2     3         2     5  \n",
            "2997         502947.22                 2               2     3         2     6  \n",
            "2998        1538368.60                 3               1     3         2     7  \n",
            "2999         329412.55                 1               1     3         2     8  \n",
            "\n",
            "[3000 rows x 25 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "S3InyzlXbUCL",
        "outputId": "e0808af9-291b-4e52-d5f0-df4ae3e6e1a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Client ID              Name  Age  Location ID Joined Bank  \\\n",
              "0     IND81288     Raymond Mills   24        34324  06-05-2019   \n",
              "1     IND65833     Julia Spencer   23        42205  10-12-2001   \n",
              "2     IND47499    Stephen Murray   27         7314  25-01-2010   \n",
              "3     IND72498    Virginia Garza   40        34594  28-03-2019   \n",
              "4     IND60181   Melissa Sanders   46        41269  20-07-2012   \n",
              "...        ...               ...  ...          ...         ...   \n",
              "2995  IND66827         Earl Hall   82         8760  09-10-2014   \n",
              "2996  IND40556  Billy Williamson   44        32837  05-02-2009   \n",
              "2997  IND72414      Victor Black   70        36088  29-12-2009   \n",
              "2998  IND46652       Andrew Ford   56        24871  13-02-2006   \n",
              "2999  IND40216        Amy Nguyen   79        38518  08-12-2005   \n",
              "\n",
              "          Banking Contact Nationality                     Occupation  \\\n",
              "0          Anthony Torres    American           Safety Technician IV   \n",
              "1        Jonathan Hawkins     African            Software Consultant   \n",
              "2           Anthony Berry    European             Help Desk Operator   \n",
              "3              Steve Diaz    American                   Geologist II   \n",
              "4              Shawn Long    American            Assistant Professor   \n",
              "...                   ...         ...                            ...   \n",
              "2995       Joshua Bennett    American       Accounting Assistant III   \n",
              "2996          Dennis Ruiz    European                      Paralegal   \n",
              "2997          Joshua Ryan    American                Statistician IV   \n",
              "2998  Nicholas Cunningham    European  Human Resources Assistant III   \n",
              "2999           Joe Hanson    American            Biostatistician III   \n",
              "\n",
              "     Fee Structure Loyalty Classification  ...  Bank Deposits  \\\n",
              "0             High                   Jade  ...     1485828.64   \n",
              "1             High                   Jade  ...      641482.79   \n",
              "2             High                   Gold  ...     1033401.59   \n",
              "3              Mid                 Silver  ...     1048157.49   \n",
              "4              Mid               Platinum  ...      487782.53   \n",
              "...            ...                    ...  ...            ...   \n",
              "2995          High                   Gold  ...     1089957.03   \n",
              "2996           Mid                   Gold  ...      136891.32   \n",
              "2997           Low                   Jade  ...      214860.89   \n",
              "2998           Mid                   Jade  ...      742630.22   \n",
              "2999          High                   Jade  ...       65617.66   \n",
              "\n",
              "      Checking Accounts  Saving Accounts  Foreign Currency Account  \\\n",
              "0             603617.88        607332.46                  12249.96   \n",
              "1             229521.37        344635.16                  61162.31   \n",
              "2             652674.69        203054.35                  79071.78   \n",
              "3            1048157.49        234685.02                  57513.65   \n",
              "4             446644.25        128351.45                  30012.14   \n",
              "...                 ...              ...                       ...   \n",
              "2995          532867.88        657849.62                  12947.31   \n",
              "2996           56581.74         93195.61                  23205.69   \n",
              "2997          158726.06         35539.15                  30291.81   \n",
              "2998          404638.26         56411.33                   6413.14   \n",
              "2999           77769.08         32371.38                   8992.36   \n",
              "\n",
              "      Business Lending  Properties Owned  Risk Weighting  BRId  GenderId  IAId  \n",
              "0           1134475.30                 1               2     1         1     1  \n",
              "1           2000526.10                 1               3     2         1     2  \n",
              "2            548137.58                 1               3     3         2     3  \n",
              "3           1148402.29                 0               4     4         1     4  \n",
              "4           1674412.12                 0               3     1         2     5  \n",
              "...                ...               ...             ...   ...       ...   ...  \n",
              "2995        1238859.91                 1               3     3         2     4  \n",
              "2996         277171.07                 1               2     3         2     5  \n",
              "2997         502947.22                 2               2     3         2     6  \n",
              "2998        1538368.60                 3               1     3         2     7  \n",
              "2999         329412.55                 1               1     3         2     8  \n",
              "\n",
              "[3000 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c2c530e-de78-4bc6-9338-feaf33a2e57e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Client ID</th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>Location ID</th>\n",
              "      <th>Joined Bank</th>\n",
              "      <th>Banking Contact</th>\n",
              "      <th>Nationality</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Fee Structure</th>\n",
              "      <th>Loyalty Classification</th>\n",
              "      <th>...</th>\n",
              "      <th>Bank Deposits</th>\n",
              "      <th>Checking Accounts</th>\n",
              "      <th>Saving Accounts</th>\n",
              "      <th>Foreign Currency Account</th>\n",
              "      <th>Business Lending</th>\n",
              "      <th>Properties Owned</th>\n",
              "      <th>Risk Weighting</th>\n",
              "      <th>BRId</th>\n",
              "      <th>GenderId</th>\n",
              "      <th>IAId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>IND81288</td>\n",
              "      <td>Raymond Mills</td>\n",
              "      <td>24</td>\n",
              "      <td>34324</td>\n",
              "      <td>06-05-2019</td>\n",
              "      <td>Anthony Torres</td>\n",
              "      <td>American</td>\n",
              "      <td>Safety Technician IV</td>\n",
              "      <td>High</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>1485828.64</td>\n",
              "      <td>603617.88</td>\n",
              "      <td>607332.46</td>\n",
              "      <td>12249.96</td>\n",
              "      <td>1134475.30</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>IND65833</td>\n",
              "      <td>Julia Spencer</td>\n",
              "      <td>23</td>\n",
              "      <td>42205</td>\n",
              "      <td>10-12-2001</td>\n",
              "      <td>Jonathan Hawkins</td>\n",
              "      <td>African</td>\n",
              "      <td>Software Consultant</td>\n",
              "      <td>High</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>641482.79</td>\n",
              "      <td>229521.37</td>\n",
              "      <td>344635.16</td>\n",
              "      <td>61162.31</td>\n",
              "      <td>2000526.10</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>IND47499</td>\n",
              "      <td>Stephen Murray</td>\n",
              "      <td>27</td>\n",
              "      <td>7314</td>\n",
              "      <td>25-01-2010</td>\n",
              "      <td>Anthony Berry</td>\n",
              "      <td>European</td>\n",
              "      <td>Help Desk Operator</td>\n",
              "      <td>High</td>\n",
              "      <td>Gold</td>\n",
              "      <td>...</td>\n",
              "      <td>1033401.59</td>\n",
              "      <td>652674.69</td>\n",
              "      <td>203054.35</td>\n",
              "      <td>79071.78</td>\n",
              "      <td>548137.58</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IND72498</td>\n",
              "      <td>Virginia Garza</td>\n",
              "      <td>40</td>\n",
              "      <td>34594</td>\n",
              "      <td>28-03-2019</td>\n",
              "      <td>Steve Diaz</td>\n",
              "      <td>American</td>\n",
              "      <td>Geologist II</td>\n",
              "      <td>Mid</td>\n",
              "      <td>Silver</td>\n",
              "      <td>...</td>\n",
              "      <td>1048157.49</td>\n",
              "      <td>1048157.49</td>\n",
              "      <td>234685.02</td>\n",
              "      <td>57513.65</td>\n",
              "      <td>1148402.29</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>IND60181</td>\n",
              "      <td>Melissa Sanders</td>\n",
              "      <td>46</td>\n",
              "      <td>41269</td>\n",
              "      <td>20-07-2012</td>\n",
              "      <td>Shawn Long</td>\n",
              "      <td>American</td>\n",
              "      <td>Assistant Professor</td>\n",
              "      <td>Mid</td>\n",
              "      <td>Platinum</td>\n",
              "      <td>...</td>\n",
              "      <td>487782.53</td>\n",
              "      <td>446644.25</td>\n",
              "      <td>128351.45</td>\n",
              "      <td>30012.14</td>\n",
              "      <td>1674412.12</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2995</th>\n",
              "      <td>IND66827</td>\n",
              "      <td>Earl Hall</td>\n",
              "      <td>82</td>\n",
              "      <td>8760</td>\n",
              "      <td>09-10-2014</td>\n",
              "      <td>Joshua Bennett</td>\n",
              "      <td>American</td>\n",
              "      <td>Accounting Assistant III</td>\n",
              "      <td>High</td>\n",
              "      <td>Gold</td>\n",
              "      <td>...</td>\n",
              "      <td>1089957.03</td>\n",
              "      <td>532867.88</td>\n",
              "      <td>657849.62</td>\n",
              "      <td>12947.31</td>\n",
              "      <td>1238859.91</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2996</th>\n",
              "      <td>IND40556</td>\n",
              "      <td>Billy Williamson</td>\n",
              "      <td>44</td>\n",
              "      <td>32837</td>\n",
              "      <td>05-02-2009</td>\n",
              "      <td>Dennis Ruiz</td>\n",
              "      <td>European</td>\n",
              "      <td>Paralegal</td>\n",
              "      <td>Mid</td>\n",
              "      <td>Gold</td>\n",
              "      <td>...</td>\n",
              "      <td>136891.32</td>\n",
              "      <td>56581.74</td>\n",
              "      <td>93195.61</td>\n",
              "      <td>23205.69</td>\n",
              "      <td>277171.07</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2997</th>\n",
              "      <td>IND72414</td>\n",
              "      <td>Victor Black</td>\n",
              "      <td>70</td>\n",
              "      <td>36088</td>\n",
              "      <td>29-12-2009</td>\n",
              "      <td>Joshua Ryan</td>\n",
              "      <td>American</td>\n",
              "      <td>Statistician IV</td>\n",
              "      <td>Low</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>214860.89</td>\n",
              "      <td>158726.06</td>\n",
              "      <td>35539.15</td>\n",
              "      <td>30291.81</td>\n",
              "      <td>502947.22</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2998</th>\n",
              "      <td>IND46652</td>\n",
              "      <td>Andrew Ford</td>\n",
              "      <td>56</td>\n",
              "      <td>24871</td>\n",
              "      <td>13-02-2006</td>\n",
              "      <td>Nicholas Cunningham</td>\n",
              "      <td>European</td>\n",
              "      <td>Human Resources Assistant III</td>\n",
              "      <td>Mid</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>742630.22</td>\n",
              "      <td>404638.26</td>\n",
              "      <td>56411.33</td>\n",
              "      <td>6413.14</td>\n",
              "      <td>1538368.60</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2999</th>\n",
              "      <td>IND40216</td>\n",
              "      <td>Amy Nguyen</td>\n",
              "      <td>79</td>\n",
              "      <td>38518</td>\n",
              "      <td>08-12-2005</td>\n",
              "      <td>Joe Hanson</td>\n",
              "      <td>American</td>\n",
              "      <td>Biostatistician III</td>\n",
              "      <td>High</td>\n",
              "      <td>Jade</td>\n",
              "      <td>...</td>\n",
              "      <td>65617.66</td>\n",
              "      <td>77769.08</td>\n",
              "      <td>32371.38</td>\n",
              "      <td>8992.36</td>\n",
              "      <td>329412.55</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3000 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c2c530e-de78-4bc6-9338-feaf33a2e57e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8c2c530e-de78-4bc6-9338-feaf33a2e57e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8c2c530e-de78-4bc6-9338-feaf33a2e57e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58d3abfd-77af-45b7-945a-7d39fb940536\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58d3abfd-77af-45b7-945a-7d39fb940536')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58d3abfd-77af-45b7-945a-7d39fb940536 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_e345c905-b884-4b83-8067-e80ece49ef0d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e345c905-b884-4b83-8067-e80ece49ef0d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "id": "VtP4B-5YbYYi",
        "outputId": "30773403-ba8b-4aad-cb6f-8f760c1eb53c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Age   Location ID  Estimated Income  Superannuation Savings  \\\n",
              "count  3000.000000   3000.000000       3000.000000             3000.000000   \n",
              "mean     51.039667  21563.323000     171305.034263            25531.599673   \n",
              "std      19.854760  12462.273017     111935.808209            16259.950770   \n",
              "min      17.000000     12.000000      15919.480000             1482.030000   \n",
              "25%      34.000000  10803.500000      82906.595000            12513.775000   \n",
              "50%      51.000000  21129.500000     142313.480000            22357.355000   \n",
              "75%      69.000000  32054.500000     242290.305000            35464.740000   \n",
              "max      85.000000  43369.000000     522330.260000            75963.900000   \n",
              "\n",
              "       Amount of Credit Cards  Credit Card Balance    Bank Loans  \\\n",
              "count             3000.000000          3000.000000  3.000000e+03   \n",
              "mean                 1.463667          3176.206943  5.913862e+05   \n",
              "std                  0.676387          2497.094709  4.575570e+05   \n",
              "min                  1.000000             1.170000  0.000000e+00   \n",
              "25%                  1.000000          1236.630000  2.396281e+05   \n",
              "50%                  1.000000          2560.805000  4.797934e+05   \n",
              "75%                  2.000000          4522.632500  8.258130e+05   \n",
              "max                  3.000000         13991.990000  2.667557e+06   \n",
              "\n",
              "       Bank Deposits  Checking Accounts  Saving Accounts  \\\n",
              "count   3.000000e+03       3.000000e+03     3.000000e+03   \n",
              "mean    6.715602e+05       3.210929e+05     2.329084e+05   \n",
              "std     6.457169e+05       2.820796e+05     2.300078e+05   \n",
              "min     0.000000e+00       0.000000e+00     0.000000e+00   \n",
              "25%     2.044004e+05       1.199475e+05     7.479440e+04   \n",
              "50%     4.633165e+05       2.428157e+05     1.640866e+05   \n",
              "75%     9.427546e+05       4.348749e+05     3.155750e+05   \n",
              "max     3.890598e+06       1.969923e+06     1.724118e+06   \n",
              "\n",
              "       Foreign Currency Account  Business Lending  Properties Owned  \\\n",
              "count               3000.000000      3.000000e+03       3000.000000   \n",
              "mean               29883.529993      8.667598e+05          1.518667   \n",
              "std                23109.924010      6.412303e+05          1.102145   \n",
              "min                   45.000000      0.000000e+00          0.000000   \n",
              "25%                11916.542500      3.748251e+05          1.000000   \n",
              "50%                24341.190000      7.113147e+05          2.000000   \n",
              "75%                41966.392500      1.185110e+06          2.000000   \n",
              "max               124704.870000      3.825962e+06          3.000000   \n",
              "\n",
              "       Risk Weighting         BRId     GenderId         IAId  \n",
              "count     3000.000000  3000.000000  3000.000000  3000.000000  \n",
              "mean         2.249333     2.559333     1.504000    10.425333  \n",
              "std          1.131191     1.007713     0.500067     5.988242  \n",
              "min          1.000000     1.000000     1.000000     1.000000  \n",
              "25%          1.000000     2.000000     1.000000     5.000000  \n",
              "50%          2.000000     3.000000     2.000000    10.000000  \n",
              "75%          3.000000     3.000000     2.000000    15.000000  \n",
              "max          5.000000     4.000000     2.000000    22.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9a702a4d-7d48-49d1-be36-1b7d3f054948\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Location ID</th>\n",
              "      <th>Estimated Income</th>\n",
              "      <th>Superannuation Savings</th>\n",
              "      <th>Amount of Credit Cards</th>\n",
              "      <th>Credit Card Balance</th>\n",
              "      <th>Bank Loans</th>\n",
              "      <th>Bank Deposits</th>\n",
              "      <th>Checking Accounts</th>\n",
              "      <th>Saving Accounts</th>\n",
              "      <th>Foreign Currency Account</th>\n",
              "      <th>Business Lending</th>\n",
              "      <th>Properties Owned</th>\n",
              "      <th>Risk Weighting</th>\n",
              "      <th>BRId</th>\n",
              "      <th>GenderId</th>\n",
              "      <th>IAId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3.000000e+03</td>\n",
              "      <td>3.000000e+03</td>\n",
              "      <td>3.000000e+03</td>\n",
              "      <td>3.000000e+03</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3.000000e+03</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>51.039667</td>\n",
              "      <td>21563.323000</td>\n",
              "      <td>171305.034263</td>\n",
              "      <td>25531.599673</td>\n",
              "      <td>1.463667</td>\n",
              "      <td>3176.206943</td>\n",
              "      <td>5.913862e+05</td>\n",
              "      <td>6.715602e+05</td>\n",
              "      <td>3.210929e+05</td>\n",
              "      <td>2.329084e+05</td>\n",
              "      <td>29883.529993</td>\n",
              "      <td>8.667598e+05</td>\n",
              "      <td>1.518667</td>\n",
              "      <td>2.249333</td>\n",
              "      <td>2.559333</td>\n",
              "      <td>1.504000</td>\n",
              "      <td>10.425333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>19.854760</td>\n",
              "      <td>12462.273017</td>\n",
              "      <td>111935.808209</td>\n",
              "      <td>16259.950770</td>\n",
              "      <td>0.676387</td>\n",
              "      <td>2497.094709</td>\n",
              "      <td>4.575570e+05</td>\n",
              "      <td>6.457169e+05</td>\n",
              "      <td>2.820796e+05</td>\n",
              "      <td>2.300078e+05</td>\n",
              "      <td>23109.924010</td>\n",
              "      <td>6.412303e+05</td>\n",
              "      <td>1.102145</td>\n",
              "      <td>1.131191</td>\n",
              "      <td>1.007713</td>\n",
              "      <td>0.500067</td>\n",
              "      <td>5.988242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>15919.480000</td>\n",
              "      <td>1482.030000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.170000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>45.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>34.000000</td>\n",
              "      <td>10803.500000</td>\n",
              "      <td>82906.595000</td>\n",
              "      <td>12513.775000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1236.630000</td>\n",
              "      <td>2.396281e+05</td>\n",
              "      <td>2.044004e+05</td>\n",
              "      <td>1.199475e+05</td>\n",
              "      <td>7.479440e+04</td>\n",
              "      <td>11916.542500</td>\n",
              "      <td>3.748251e+05</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>51.000000</td>\n",
              "      <td>21129.500000</td>\n",
              "      <td>142313.480000</td>\n",
              "      <td>22357.355000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2560.805000</td>\n",
              "      <td>4.797934e+05</td>\n",
              "      <td>4.633165e+05</td>\n",
              "      <td>2.428157e+05</td>\n",
              "      <td>1.640866e+05</td>\n",
              "      <td>24341.190000</td>\n",
              "      <td>7.113147e+05</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>69.000000</td>\n",
              "      <td>32054.500000</td>\n",
              "      <td>242290.305000</td>\n",
              "      <td>35464.740000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4522.632500</td>\n",
              "      <td>8.258130e+05</td>\n",
              "      <td>9.427546e+05</td>\n",
              "      <td>4.348749e+05</td>\n",
              "      <td>3.155750e+05</td>\n",
              "      <td>41966.392500</td>\n",
              "      <td>1.185110e+06</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>15.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>85.000000</td>\n",
              "      <td>43369.000000</td>\n",
              "      <td>522330.260000</td>\n",
              "      <td>75963.900000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>13991.990000</td>\n",
              "      <td>2.667557e+06</td>\n",
              "      <td>3.890598e+06</td>\n",
              "      <td>1.969923e+06</td>\n",
              "      <td>1.724118e+06</td>\n",
              "      <td>124704.870000</td>\n",
              "      <td>3.825962e+06</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>22.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a702a4d-7d48-49d1-be36-1b7d3f054948')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9a702a4d-7d48-49d1-be36-1b7d3f054948 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9a702a4d-7d48-49d1-be36-1b7d3f054948');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-277ba75e-537b-4075-99b5-6d781e322242\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-277ba75e-537b-4075-99b5-6d781e322242')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-277ba75e-537b-4075-99b5-6d781e322242 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1044.4070732954572,\n        \"min\": 17.0,\n        \"max\": 3000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          51.03966666666667,\n          51.0,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14612.18148735417,\n        \"min\": 12.0,\n        \"max\": 43369.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          21563.323,\n          21129.5,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Estimated Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 165675.79415446558,\n        \"min\": 3000.0,\n        \"max\": 522330.26,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          171305.03426333333,\n          142313.47999999998,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Superannuation Savings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23834.521347506627,\n        \"min\": 1482.03,\n        \"max\": 75963.9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25531.59967333333,\n          22357.355000000003,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amount of Credit Cards\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1060.1482852588065,\n        \"min\": 0.6763867645368546,\n        \"max\": 3000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3000.0,\n          1.4636666666666667,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Credit Card Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4303.156900678545,\n        \"min\": 1.17,\n        \"max\": 13991.99,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3176.2069433333336,\n          2560.8050000000003,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bank Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 860222.1898574389,\n        \"min\": 0.0,\n        \"max\": 2667556.66,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          591386.1554866667,\n          479793.4,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bank Deposits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1272432.2911375419,\n        \"min\": 0.0,\n        \"max\": 3890598.08,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          671560.1939233334,\n          463316.46,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Checking Accounts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 643980.7752101668,\n        \"min\": 0.0,\n        \"max\": 1969923.08,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          321092.94912666664,\n          242815.655,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Saving Accounts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 569501.1225021764,\n        \"min\": 0.0,\n        \"max\": 1724118.36,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          232908.3534833333,\n          164086.555,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Foreign Currency Account\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39821.13354767674,\n        \"min\": 45.0,\n        \"max\": 124704.87,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29883.529993333334,\n          24341.190000000002,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Business Lending\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1231479.8807215113,\n        \"min\": 0.0,\n        \"max\": 3825961.94,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          866759.8084066667,\n          711314.6599999999,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Properties Owned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1060.1241040744355,\n        \"min\": 0.0,\n        \"max\": 3000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3000.0,\n          1.5186666666666666,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Risk Weighting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1059.8841834225843,\n        \"min\": 1.0,\n        \"max\": 3000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3000.0,\n          2.2493333333333334,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BRId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1059.8239053751968,\n        \"min\": 1.0,\n        \"max\": 3000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3000.0,\n          2.5593333333333335,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GenderId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1060.1550392950937,\n        \"min\": 0.5000673512490724,\n        \"max\": 3000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.504,\n          2.0,\n          0.5000673512490724\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IAId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1057.1739338184325,\n        \"min\": 1.0,\n        \"max\": 3000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.425333333333333,\n          10.0,\n          3000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bins=[0, 100000, 300000, float('inf')]\n",
        "labels = ['Low','Med','High']\n",
        "\n",
        "df['income band'] = pd.cut(df['Estimated Income'], bins=bins, labels=labels, right=False)"
      ],
      "metadata": {
        "id": "gLUgkgLgco4V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['income band'].value_counts().plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "G_Je11Svgivs",
        "outputId": "0184bca1-4d23-40c9-aa2c-0409aeed4b3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='income band'>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols=df[[\"BRId\", \"GenderId\", \"IAId\", \"Amount of Credit Cards\", \"Nationality\", \"Occupation\", \"Fee Structure\"]].columns\n",
        "for col in categorical_cols:\n",
        "  print(f\"value counts for'{col}':\")\n",
        "  display(df[col].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EUBz67qq8rJt",
        "outputId": "65d6c42d-b322-425a-ca8b-ab75120df5c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'BRId':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "BRId\n",
              "3    1352\n",
              "1     660\n",
              "2     495\n",
              "4     493\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BRId</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1352</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>493</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'GenderId':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "GenderId\n",
              "2    1512\n",
              "1    1488\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GenderId</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1488</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'IAId':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "IAId\n",
              "1     177\n",
              "2     177\n",
              "3     177\n",
              "4     177\n",
              "8     177\n",
              "9     176\n",
              "13    176\n",
              "12    176\n",
              "10    176\n",
              "11    176\n",
              "14    176\n",
              "15    176\n",
              "6      89\n",
              "5      89\n",
              "7      89\n",
              "16     88\n",
              "17     88\n",
              "18     88\n",
              "19     88\n",
              "20     88\n",
              "21     88\n",
              "22     88\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>IAId</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'Amount of Credit Cards':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Amount of Credit Cards\n",
              "1    1922\n",
              "2     765\n",
              "3     313\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Amount of Credit Cards</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>313</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'Nationality':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Nationality\n",
              "European      1309\n",
              "Asian          754\n",
              "American       507\n",
              "Australian     254\n",
              "African        176\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nationality</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>European</th>\n",
              "      <td>1309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Asian</th>\n",
              "      <td>754</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>American</th>\n",
              "      <td>507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Australian</th>\n",
              "      <td>254</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>African</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'Occupation':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Occupation\n",
              "Associate Professor             28\n",
              "Structural Analysis Engineer    28\n",
              "Recruiter                       25\n",
              "Account Coordinator             24\n",
              "Human Resources Manager         24\n",
              "                                ..\n",
              "Office Assistant IV              8\n",
              "Automation Specialist I          7\n",
              "Computer Systems Analyst I       6\n",
              "Developer III                    5\n",
              "Senior Sales Associate           4\n",
              "Name: count, Length: 195, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Associate Professor</th>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Structural Analysis Engineer</th>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Recruiter</th>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Account Coordinator</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Human Resources Manager</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Office Assistant IV</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Automation Specialist I</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Computer Systems Analyst I</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Developer III</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Senior Sales Associate</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>195 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "value counts for'Fee Structure':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Fee Structure\n",
              "High    1476\n",
              "Mid      962\n",
              "Low      562\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fee Structure</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>High</th>\n",
              "      <td>1476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mid</th>\n",
              "      <td>962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low</th>\n",
              "      <td>562</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i, predicate in enumerate(categorical_cols):\n",
        "  plt.figure(i)\n",
        "  sns.countplot(data=df, x=predicate, hue='GenderId')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SGVtTzKKwMkO",
        "outputId": "287da2b4-134d-4613-f74f-20522a415a02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAApUAAAGwCAYAAAD42J6/AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAS0hJREFUeJzt3Xl4VNXh//HPzZ6QjSUhCQRigqwSolCQRTZRoBWJVVSKBUTtVwULRVCxKhRQtBZBC6JWAa24VoVWLCIg4IJVgqBSQZZAoCYEkCQkSIDk/P7gN9cM2bmZTBLfr+c5D7nbOeeeuXPnw507M5YxxggAAABwwMfbHQAAAED9R6gEAACAY4RKAAAAOEaoBAAAgGOESgAAADhGqAQAAIBjhEoAAAA45uftDtRHxcXF+v777xUWFibLsrzdHQAAUAXGGB0/flxxcXHy8eG6Wk0jVJ6H77//XvHx8d7uBgAAOA8HDhxQy5Ytvd2NBodQeR7CwsIknT0ow8PDvdwbAABQFXl5eYqPj7dfx1GzCJXnwfWWd3h4OKESAIB6hlvXPIMbCgAAAOAYoRIAAACOESoBAADgGPdUAgBQjxQVFen06dPe7kadFRAQwNcFeQmhEgCAesAYo6ysLOXk5Hi7K3Waj4+PLrjgAgUEBHi7Kz87hEoAAOoBV6CMjo5WSEgIn2Aug+vHSTIzM9WqVSvGqJYRKgEAqOOKiorsQNm0aVNvd6dOi4qK0vfff68zZ87I39/f2935WeGmAwAA6jjXPZQhISFe7knd53rbu6ioyMs9+fkhVAIAUE/wdm7lGCPvIVQCAADAMUIlAAAAHCNUAgAAx/r3769JkybVSltjx45VampqrbSFqiNUAgDQQGRlZWnixIlq06aNgoKC1Lx5c/Xu3VuLFi3SiRMnvN29KpkxY4ZSUlK83Q2cB75SCACABmDv3r3q3bu3IiMj9cgjj6hz584KDAzU119/reeee04tWrTQ1Vdf7e1ulquoqIgP2dRzXKkEAKABuPPOO+Xn56fNmzfr+uuvV4cOHZSYmKjhw4dr5cqVGjZsmCQpJydHt956q6KiohQeHq6BAwdq27Ztdj2uK4V///vflZCQoIiICN144406fvy4vU5BQYFGjx6t0NBQxcbGau7cuaX6U1hYqClTpqhFixZq1KiRevToofXr19vLly5dqsjISP3zn/9Ux44dFRgYqIyMjFL1FBUVafLkyYqMjFTTpk11zz33yBhTgyOHmkKoBIA6LHv7tspXws/e0aNHtXr1ao0fP16NGjUqcx3XVcARI0YoOztb//73v5WWlqZLLrlEl19+uX744Qd73T179mj58uV699139e6772rDhg169NFH7eVTp07Vhg0btGLFCq1evVrr16/Xli1b3NqbMGGCNm3apNdee01fffWVRowYoSFDhmjXrl32OidOnNBjjz2m559/Xtu3b1d0dHSpfs+dO1dLly7V4sWL9fHHH+uHH37QO++842i84Bm8/Q0AQD23e/duGWPUrl07t/nNmjXTyZMnJUnjx4/XsGHD9Pnnnys7O1uBgYGSpL/85S9avny5/vGPf+h3v/udpLM/d7h06VKFhYVJkn77299q7dq1evjhh5Wfn68XXnhBL7/8si6//HJJ0osvvqiWLVva7WZkZGjJkiXKyMhQXFycJGnKlClatWqVlixZokceeUTS2S91f/rpp9WlS5dy923+/PmaNm2afv3rX0uSnnnmGb3//vuOxww1j1AJAEAD9fnnn6u4uFijRo1SYWGhtm3bpvz8/FI/9fjjjz9qz5499nRCQoIdKCUpNjZW2dnZks5exTx16pR69OhhL2/SpIlboP36669VVFSktm3burVTWFjo1nZAQICSk5PL7X9ubq4yMzPd2vLz81O3bt14C7wOIlQCAFDPtWnTRpZlaefOnW7zExMTJUnBwcGSpPz8fMXGxrrd2+gSGRlp/33ub2ZblqXi4uIq9yc/P1++vr5KS0uTr6+v27LQ0FD77+DgYD6c04BwTyUAAPVc06ZNdcUVV2jBggUqKCgod71LLrlEWVlZ8vPzU5s2bdxKs2bNqtRWUlKS/P399Z///Meed+zYMX333Xf29MUXX6yioiJlZ2eXaicmJqbK+xUREaHY2Fi3ts6cOaO0tLQq14HaQ6gEAKABePrpp3XmzBl169ZNr7/+ur799lvt3LlTL7/8snbs2CFfX18NGjRIPXv2VGpqqlavXq19+/bp008/1R//+Edt3ry5Su2Ehobqlltu0dSpU7Vu3Tp98803Gjt2rHx8fooUbdu21ahRozR69Gi9/fbbSk9P1+eff645c+Zo5cqV1dqviRMn6tFHH9Xy5cu1Y8cO3XnnncrJyalWHagdvP0NAEADkJSUpC+//FKP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mSlTppiUlBQjyezevdvexvV879+/v338FBcXm6SkJBMZGWn8/f1NaGio2bNnj9txWd656eOPPzbS2fv1AgMDTXx8fJn74erfTTfdZFq3bl1qPEtyPSbGnD1HtmrVygwbNqzC19eyjiMneaBkHeW91lZ0jLmU93pSkYpe0+qDsm9crCdOnDihzMxMPfroo/q///u/cu+x9Kb9+/fr1Vdf1ZkzZ9SlSxc9//zz2rVrl4wxGj16dKXbr169Wh07dlRhYaEWLFig9PR0/eY3v9Fjjz1Wqp3Vq1erX79+Sk9P18MPP6y9e/eqW7duuuyyy7R7926lp6fL399fK1eu1F133eW2/axZs3TmzBkNGDBAaWlpeuCBB+Tn56fjx49r48aNmjp1qhISErR//3795je/sbdLS0vTF198oS+//FL+/v6aO3euiouLlZCQoFGjRkmShg8fXmq/Tpw4oWeeeUaDBw+Wr6+vXn31Va1Zs6bMWyaMMcrOzrbvHfn888/VpUsXZWZm6p577lFCQoL69u2rv/zlL7riiivUqFEj/fvf/9aLL76obt26SZIeeeQRJScn27+Ju2TJEv3hD3/Q1KlTNW/ePBlj1K1bN91xxx1KT09XSkqKXn31VXXv3l25ubmaOXOmpLO3gXzxxRdq2rSp1q1bp9mzZ+vSSy/VsmXL9J///Edr1qxR06ZNdf3115f5/ayuPrrGLjc3VzfddJOys7M1d+5cRUZG6uqrry613d69e7Vs2TJdeOGFevrpp3X69Gn5+voqNzdXH374odavX68dO3Zoz549Wrp0qTIzM/Xtt98qMzNTp0+fliRt27ZNU6dO1d/+9jf169dPzz77rPbv36/09HSFh4fr5MmTGjBggLZu3arc3Fzl5+erc+fObuN85ZVXqk+fPqUey8zMTH333Xf61a9+pbS0NPXu3Vs+Pj46duyY1q9fr/Xr12vIkCHat2+f3nvvPTVu3FjPPvus0tLS9OOPP2rVqlWyLEsjRoywx63ktk8//bQk6csvv1RBQYGOHDmiLVu22I/L8OHD3c4H48aN0/z589W1a1c98MADateunT766CNdcsklmjJliq666irl5+frySeflGVZuuGGG+xx+fbbbzV79mxlZWXpuuuu08SJE+3nnSStW7eu1NhERUXp0KFDeu+99xQTE6PRo0fLsiwVFhbq1ltvVVFRkbZv364LL7xQTz75pPbu3auOHTvqxhtvVKtWrbRlyxbFxMQoNTVVb731lr744gv97ne/0/Tp07VmzRrddddd9nH3ySef6PHHH9eECRN04sQJ7dixQ/fff7+Kior0+9//3n5cjhw5oh9//FE//vijdu3aJensLUO+vr66+uqrdf/996tt27a666671KZNG7355puSzv5SketcWlhYqMOHD2vr1q2KjY1Vfn6+5syZo5SUFO3atavM5+6XX36pHTt2lHru+Pv766WXXlJiYqJatGihbdu26d5779XVV1+tX/3qV9q5c6dSUlL00ksvqbi42P5Fq/vuu8/tF6reeOMNrVmzRpGRkfrzn/+s4uJiHTlyxO3589RTT1XrPPPNN98oLCxMu3fv1pQpU7Ry5Ur96U9/0l//+le9+OKL9vHn6r8kZWVl6ZZbbpExxv5lONfnAco655WUn5+vffv2acGCBZo9e7Y9f/78+dq3b5+GDBmibdu2adasWSosLHT75ZqSx/m1116rxx9/XEuWLNHFF1+shx56SJLUqlUrfffdd4qKitK6dev00ksvqX379vrnP/+pPXv26Pvvv9fEiRN1+PBhvfrqqzp48KAsy1JRUZFSU1M1evRoJSQkqE+fPm7npuLiYt11111KTEzUd999p7fffls+Pj6KiIhQTk6OwsPDS50bZs6cqTfffFPXX3+90tLSlJGRoQceeKDC8ZHO3ip36NAhHTx4UM8//7z+9a9/2cvKOo5+/etf6/vvv3eUB5xmipKvw+e+ZpenrPOJ6zWtXvJupq2cKrhSOX36dOPn52cGDhxojh8/7p0OlnBu/4w5+w31Xbt2dfukup+fn7npppvs74OqqL727dub8PBwExYWZnr27Gk2bNhgjDGl/veUkZFhevXqZcLDw02jRo1MWFiY/W9UVJTddosWLczMmTPN6dOn3dr6/e9/b39KzMfHx8THx5t//vOfpk2bNva8rl272u27vPvuu/YVj5CQEBMWFmaCg4NN48aNzaBBg8xXX31V5r6dOHHCXH755aZJkyYmJCTEXHzxxaX+F+xy7Ngxt99rjo+PN8HBwSY6Otqkpqaaffv2GWOMGTFihImKijJBQUGmY8eOZtGiRfY4dezY0d6PiIgIuy7LskxAQIAJDg52G+MtW7aYSy65xDRq1MhtXyZNmmRiY2NNYGCgSUpK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RQs9/PDDSkhI0JgxYzRu3DgtX75c6enpWr9+vd544w1J0oQJE5SXl6cbb7xRmzdv1q5du/T3v/9dO3fulCQNHDhQK1eu1MqVK7Vjxw7dcccdysnJKdWXTz75RH/+85/13XffaeHChXrzzTc1ceJESWevqp4+fVp//etftXfvXv3973/XM88847Z9QkKC8vPztXbtWh05cqTMt8UHDRqkzp07a9SoUdqyZYs+//xzjR49Wv369VO3bt1qeHQBoPYQKgF41YUXXqjNmzcrMTFR119/vZKSkvS73/1OAwYM0KZNm9SkSRNJ0qJFi3TdddfpzjvvVPv27XXbbbepoKBA0tkrnuvWrVN+fr769eunrl276m9/+5v9FvK4ceM0ZswYO7wlJiZqwIABpfpy9913a/Pmzbr44os1e/ZsPfHEExo8eLAkqUuXLnriiSf02GOP6aKLLtKyZcs0Z84ct+179eql22+/XTfccIOioqL05z//uVQblmVpxYoVaty4sfr27atBgwYpMTFRr7/+eo2OKwDUNstUdoc8APwMJCQkaNKkSaW+zxIAUDVcqQQAAIBjhEoAAAA4xtvfAAAAcIwrlQAAAHCMUAkAAADHCJUAAABwjFAJAAAAxwiVAAAAcIxQCQAAAMcIlQAAAHCMUAkAAADH/h+OTOj4ndSoxwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(categorical_cols)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "-AYAgGs_IBEA",
        "outputId": "d7ab87c3-c5e8-4117-f4b7-3d3318ab84aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols=['Estimated Income', 'Superannuation Savings', 'Credit Card Balance', 'Bank Loans', 'Bank Deposits', 'Checking Accounts', 'Saving Accounts', ]\n",
        "plt.figure(figsize=(8,4))\n",
        "for i, col in enumerate(numerical_cols):\n",
        "  plt.subplot(7, 1, i+1)\n",
        "\n",
        "  sns.histplot(df[col],kde=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "id": "JolPXa4pny8E",
        "outputId": "63a8de2b-a8ee-46f5-a6d6-04d0436f5f64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 7 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = df[numerical_cols].corr()\n",
        "sns.heatmap(cm, annot=True, cmap='crest')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "XCRRZzsEpzHC",
        "outputId": "42b4c97e-bbaf-4db5-f64e-8d0b0f383d7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sdIvq4sI1072"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}